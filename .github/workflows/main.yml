name: Build and Test Screenshot Tool

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] 
        # Example of matrix for Python versions, can be simplified if only one is needed
        python-version: ['3.8'] 

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Updated to v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5 # Updated to v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r screenshot_tool/requirements.txt

    - name: Install OS-specific dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update -y
          sudo apt-get install -y python3-tk tesseract-ocr tesseract-ocr-chi-sim libxtst-dev libxext-dev libxrandr-dev libjpeg-dev libpng-dev libtiff-dev zlib1g-dev
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install tesseract tesseract-lang pkg-config # pkg-config might be needed for some Pillow features
          # For macOS, Pillow usually finds Tesseract if installed via Homebrew. Tkinter is usually bundled.
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "Windows: Attempting to install Tesseract OCR using Chocolatey"
          choco install tesseract --params "/Lang=eng+chi_sim" --yes --force || echo "Chocolatey Tesseract install failed or choco not available."
          # Tkinter is usually bundled with Python on Windows.
          # Pillow should find Tesseract if its installation path is added to PATH by the installer.
          # Further PATH adjustments for Tesseract might be needed if choco doesn't handle it fully.
          # Example: set PATH=%PATH%;C:\Program Files\Tesseract-OCR
        fi
      shell: bash # Important for cross-platform consistency of if/else syntax and commands like choco

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Run Linters and Formatters (Placeholder)
      run: |
        echo "Placeholder for running linters like Flake8 or formatters like Black."
        # Example (uncomment and configure when ready):
        # pip install flake8 black
        # flake8 src tests
        # black --check src tests

    - name: Run Tests (Placeholder)
      run: |
        echo "Placeholder for running unit tests and integration tests with pytest or unittest."
        # Example (uncomment and configure when ready):
        # pip install pytest
        # pytest tests/

    - name: Build Application with PyInstaller
      run: |
        echo "Current working directory: $(pwd)"
        echo "Listing files in current directory (root of checkout):"
        ls -lR .
        echo "--------------------------------------------------"
        echo "Listing files in screenshot_tool/ directory:"
        ls -lR screenshot_tool
        echo "--------------------------------------------------"
        echo "Listing files in screenshot_tool/src/ directory:"
        ls -lR screenshot_tool/src
        echo "--------------------------------------------------"
        echo "Checking for screenshot_tool/src/assets/ directory specifically:"
        if [ -d "screenshot_tool/src/assets" ]; then
          echo "screenshot_tool/src/assets/ directory FOUND. Listing contents:"
          ls -lR screenshot_tool/src/assets
        else
          echo "screenshot_tool/src/assets/ directory NOT FOUND."
        fi
        echo "--------------------------------------------------"
        if [ "$RUNNER_OS" == "Linux" ]; then
          # Assuming assets are in screenshot_tool/assets and need to be in the final package's assets folder
          # PyInstaller path separators are POSIX-like (/)
          # i18n.py is automatically included as it's imported.
          pyinstaller --onefile --windowed --name "ScreenshotToolPro-${{ matrix.os }}" \
            --add-data "screenshot_tool/src/assets:assets" \
            screenshot_tool/src/main.py
        elif [ "$RUNNER_OS" == "macOS" ]; then
          pyinstaller --onefile --windowed --name "ScreenshotToolPro-${{ matrix.os }}" \
            --add-data "screenshot_tool/src/assets:assets" \
            # --icon="screenshot_tool/src/assets/app_icon.icns" # Uncomment and provide app_icon.icns in src/assets
            screenshot_tool/src/main.py
        elif [ "$RUNNER_OS" == "Windows" ]; then
          # Windows uses ; as path separator for PyInstaller's --add-data if multiple sources for one target,
          # but for --add-data "source:target" or "source;target_in_spec", the CLI usually takes one pair per option.
          # Using POSIX-like for source here for consistency, PyInstaller often handles it.
          pyinstaller --onefile --windowed --name "ScreenshotToolPro-${{ matrix.os }}.exe" \
            --add-data "screenshot_tool/src/assets;assets" \
            # --icon="screenshot_tool/src/assets/app_icon.ico" # Uncomment and provide app_icon.ico in src/assets
            screenshot_tool/src/main.py
        fi
      # shell: bash # Not strictly needed here if using only PyInstaller commands, but good for consistency if complex scripts evolve.

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: always() # Or use `if: success()` to only upload on successful build. `always()` useful for debugging failed builds too.
      with:
        name: ScreenshotToolPro-build-${{ matrix.os }} # Ensures unique artifact name per OS
        path: |
          dist/ScreenshotToolPro-${{ matrix.os }}*
          # For Windows, the asterisk will include the .exe which is already part of the name from PyInstaller step
          # For macOS, if it's an .app bundle, PyInstaller might create it in dist/
          # Ensure this path correctly captures the output from PyInstaller.
        # retention-days: 7 # Optional: How long to keep artifacts
